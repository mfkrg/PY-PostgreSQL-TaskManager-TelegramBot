import psycopg2
import telebot
from telebot import types
from config import host, user, password, db_name

connection = psycopg2.connect(
    host=host,
    user=user,
    password=password,
    database=db_name
)
connection.autocommit = True
cursor = connection.cursor()
postgreSQL_select_Query = "select * from tasks"
getnickname = "select nickname from users"

bot = telebot.TeleBot('5323448846:AAHhQHdJTTEH7uzNRhTjpt8vOYdhlv91KF0')


@bot.message_handler(commands=['start'])
def start(message):
    startMessage = f'–ü—Ä–∏–≤–µ—Ç, <b><u>{message.from_user.first_name}</u></b>. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏ –Ω–∞–ø–∏—à–∏ /tasks. –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –∑–∞–¥–∞—á—É –Ω–∞–ø–∏—à–∏ /addtask.'
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_tasks=types.KeyboardButton(text="/tasks")
    button_register=types.KeyboardButton(text="/register")
    button_addtask=types.KeyboardButton(text="/addtask")
    button_complete=types.KeyboardButton(text="/complete")
    button_delete=types.KeyboardButton(text="/deletetask")
    keyboard.add(button_tasks, button_register, button_addtask, button_delete, button_complete)
    bot.send_message(message.chat.id, startMessage, parse_mode='html', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call:True)
def answer_start(call):
    if call.data == 'tasks':
        bot.send_message(call.message.chat.id, '/tasks')
        get_user_text(call.message)
    elif call.data == 'register':
        registration()


@bot.message_handler(commands=['register'])
def registration(message):
    current_user_nickname = message.from_user.username
    current_user_first_name = message.from_user.first_name
    cursor.execute(f"SELECT COUNT(*) FROM users WHERE nickname = '{current_user_nickname}'")

    res = cursor.fetchall()[0][0]
    if res == 0:
        print(res)
        print("can")
        bot.send_message(message.chat.id,"–û–≥–æ, —Ç–µ–±—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ!\n–°–µ–π—á–∞—Å —è –∑–∞–Ω–µ—Å—É —Ç–µ–±—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –Ω–µ –≤–æ–ª–Ω—É–π—Å—è\n–ü–æ–¥–æ–∂–¥–∏ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ –∏ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑.")
        cursor.execute(
            f'''INSERT INTO users (first_name, nickname) VALUES ('{current_user_first_name}', '{current_user_nickname}');''')

    else:
        print(res)
        print("already")
        bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å —Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


@bot.message_handler(commands=['addtask'])
def add_task(message):
    bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –¥–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ")
    bot.register_next_step_handler(message, adding)

def adding(message):
    current_user_nickname = message.from_user.username
    bot.send_message(message.chat.id, """–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: '<b><u>"""+message.text+ "</u></b>'", parse_mode='html')
    cursor.execute(f"INSERT INTO tasks(author, task_name, state) VALUES ('{current_user_nickname}','{message.text}', '–í –ü–†–û–¶–ï–°–°–ï')")


@bot.message_handler(commands=['deletetask'])
def delete_task(message):
    bot.send_message(message.chat.id, "üóë –í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É –ø–æ–¥ —É–¥–∞–ª–µ–Ω–∏–µ üóë")
    bot.register_next_step_handler(message, delite_func)
def delite_func(message):
    current_user_nickname = message.from_user.username
    cursor.execute(f"DELETE FROM tasks WHERE task_name = '{message.text}'")
    bot.send_message(message.chat.id, """üóë –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∑–∞–¥–∞—á—É <u><b>""" + message.text +"</b></u> üóë", parse_mode='html')


@bot.message_handler(commands=['complete'])
def complete_task(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, —Å—Ç–∞—Ç—É—Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å.")
    bot.register_next_step_handler(message, complete)
def complete(message_comp):
    cursor.execute(f"SELECT state FROM tasks WHERE task_name = '{message_comp.text}'")
    task_status = cursor.fetchone()[0]
    if task_status == "–í –ü–†–û–¶–ï–°–°–ï":
        cursor.execute(f"UPDATE tasks SET state = '–ì–û–¢–û–í–û' WHERE task_name = '{message_comp.text}'")
        bot.send_message(message_comp.chat.id, "–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '‚úÖ'")

    else:
        cursor.execute(f"UPDATE tasks SET state = '–í –ü–†–û–¶–ï–°–°–ï' WHERE task_name = '{message_comp.text}'")
        bot.send_message(message_comp.chat.id, "–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '‚åõ'")


@bot.message_handler(commands=['tasks'])
def get_user_text(message):
    current_user_nickname = message.from_user.username
    cursor.execute(f"SELECT task_name, state FROM tasks WHERE author = '{current_user_nickname}'")
    users_records = cursor.fetchall()
    if len(users_records) != 0:
        text = '\n\n'.join(['       '.join(map(str, x)) for x in users_records])
        text = text.replace("–ì–û–¢–û–í–û","‚úÖ")
        text = text.replace("–í –ü–†–û–¶–ï–°–°–ï", "‚åõ")
        bot.send_message(message.chat.id, (str(text)))
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")



bot.polling(none_stop=True)
